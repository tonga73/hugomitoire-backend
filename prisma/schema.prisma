// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id      Int     @default(autoincrement()) @id
  email   String  @unique
  name    String?
  type    String?
  
  role    Role    @default(DEFAULT)

  images  Image[]

  booksIllustrated  Book[]  @relation("IllustratorReferral")

  booksPublished    Book[]  @relation("PublishedReferral")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  DEFAULT
  COLLABORATOR
  ADMIN
}

model Image {
  id            Int     @default(autoincrement()) @id
  fieldname     String
  originalname  String
  encoding      String
  mimetype      String
  destination   String
  filename      String
  path          String
  size          Int

  type          String?

  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?

  book          Book?    @relation(fields: [bookId], references: [id])
  bookId        Int?

  chapter       Chapter? @relation(fields: [chapterId], references: [id])
  chapterId     Int?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Book {
  id              Int      @default(autoincrement()) @id
  name            String
  description     String?
  type            String?
  publicationDate String?

  published       Boolean? @default(false)
  
  genre           Genre?   @relation(fields: [genreId], references: [id])
  genreId         Int?

  images          Image[]

  illustrator     User?    @relation(fields: [illustratorId], references: [id], name: "IllustratorReferral")
  illustratorId   Int?

  publisher       User?    @relation(fields: [publisherId], references: [id], name: "PublishedReferral")
  publisherId     Int?

  chapters        Chapter[]
}

model Genre {
  id        Int   @default(autoincrement()) @id
  name      String?
  ageRange  String?

  books     Book[]
}

model Chapter {
  id        Int      @default(autoincrement()) @id
  name      String
  type      String?
  order     Int?

  text      Text[]

  images    Image[]

  book      Book    @relation(fields: [bookId], references: [id])
  bookId    Int
}

model Text {
  id        Int      @default(autoincrement()) @id
  content   String
  name      String?
  type      String?

  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId Int?
}